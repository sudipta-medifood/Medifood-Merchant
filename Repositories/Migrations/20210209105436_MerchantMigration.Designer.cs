// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories;

namespace Repositories.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210209105436_MerchantMigration")]
    partial class MerchantMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Models.Merchants.MerchantPharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountStatus")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("DrugLicenceNumber")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("LoginStatus")
                        .HasColumnType("text");

                    b.Property<string>("NidNumber")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(4000)");

                    b.Property<DateTime?>("PasswordReset")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(4000)");

                    b.Property<string>("PharmacyName")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("ResetToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MerchantPharmacys");
                });

            modelBuilder.Entity("Models.Merchants.MerchantRestaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountStatus")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("LoginStatus")
                        .HasColumnType("text");

                    b.Property<string>("NidNumber")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(4000)");

                    b.Property<DateTime?>("PasswordReset")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(4000)");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("ResetToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime");

                    b.Property<string>("RestaurantName")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MerchantRestaurants");
                });

            modelBuilder.Entity("Models.Merchants.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime");

                    b.Property<DateTimeOffset>("LastUpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");

                    b.HasDiscriminator<string>("Discriminator").HasValue("RefreshToken");
                });

            modelBuilder.Entity("Models.Merchants.RefTokenPharmacyMerchant", b =>
                {
                    b.HasBaseType("Models.Merchants.RefreshToken");

                    b.Property<int?>("MerchantPharmacyId")
                        .HasColumnType("int");

                    b.HasIndex("MerchantPharmacyId");

                    b.HasDiscriminator().HasValue("RefTokenPharmacyMerchant");
                });

            modelBuilder.Entity("Models.Merchants.RefTokenRestaurantMerchant", b =>
                {
                    b.HasBaseType("Models.Merchants.RefreshToken");

                    b.Property<int?>("MerchantRestaurantId")
                        .HasColumnType("int");

                    b.HasIndex("MerchantRestaurantId");

                    b.HasDiscriminator().HasValue("RefTokenRestaurantMerchant");
                });

            modelBuilder.Entity("Models.Merchants.RefTokenPharmacyMerchant", b =>
                {
                    b.HasOne("Models.Merchants.MerchantPharmacy", null)
                        .WithMany("RefTokenPharmacyMerchants")
                        .HasForeignKey("MerchantPharmacyId");
                });

            modelBuilder.Entity("Models.Merchants.RefTokenRestaurantMerchant", b =>
                {
                    b.HasOne("Models.Merchants.MerchantRestaurant", null)
                        .WithMany("RefTokenRestaurantMerchants")
                        .HasForeignKey("MerchantRestaurantId");
                });
#pragma warning restore 612, 618
        }
    }
}
